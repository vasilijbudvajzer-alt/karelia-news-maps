const Parser = require('rss-parser');
const axios = require('axios');

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
const CONFIG = {
  RSS_SOURCES: [
    'https://karelia.news/rss',
    'https://petrozavodsk.info/rss/',
    'https://karelinform.ru/rss.xml'
  ],
  KARELIA_CITIES: [
    '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫', '–ö–æ–Ω–¥–æ–ø–æ–≥–∞', '–°–æ—Ä—Ç–∞–≤–∞–ª–∞', '–ö–µ–º—å', '–ë–µ–ª–æ–º–æ—Ä—Å–∫',
    '–õ–æ—É—Ö–∏', '–ú–µ–¥–≤–µ–∂—å–µ–≥–æ—Ä—Å–∫', '–°–µ–≥–µ–∂–∞', '–ü–∏—Ç–∫—è—Ä–∞–Ω—Ç–∞', '–°—É–æ—è—Ä–≤–∏',
    '–û–ª–æ–Ω–µ—Ü', '–ü—Ä—è–∂–∞', '–ü—É–¥–æ–∂', '–õ–∞—Ö–¥–µ–Ω–ø–æ—Ö—å—è'
  ],
  CITY_COORDS: {
    '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫': { lon: 34.3469, lat: 61.7849 },
    '–ö–æ–Ω–¥–æ–ø–æ–≥–∞': { lon: 33.9272, lat: 62.2167 },
    '–°–æ—Ä—Ç–∞–≤–∞–ª–∞': { lon: 30.7031, lat: 61.7167 },
    '–ö–µ–º—å': { lon: 34.5956, lat: 64.9444 },
    '–ë–µ–ª–æ–º–æ—Ä—Å–∫': { lon: 34.4667, lat: 64.5222 },
    '–õ–æ—É—Ö–∏': { lon: 32.3500, lat: 65.7333 },
    '–ú–µ–¥–≤–µ–∂—å–µ–≥–æ—Ä—Å–∫': { lon: 34.4500, lat: 62.9333 },
    '–°–µ–≥–µ–∂–∞': { lon: 34.2833, lat: 62.5167 },
    '–ü–∏—Ç–∫—è—Ä–∞–Ω—Ç–∞': { lon: 30.6500, lat: 61.4000 },
    '–°—É–æ—è—Ä–≤–∏': { lon: 30.9000, lat: 62.1667 },
    '–û–ª–æ–Ω–µ—Ü': { lon: 32.3667, lat: 60.9833 },
    '–ü—Ä—è–∂–∞': { lon: 33.3500, lat: 61.2500 },
    '–ü—É–¥–æ–∂': { lon: 36.8500, lat: 61.9000 },
    '–õ–∞—Ö–¥–µ–Ω–ø–æ—Ö—å—è': { lon: 29.9667, lat: 61.0500 }
  },
  MAX_NEWS_AGE: 7 * 24 * 60 * 60 * 1000,
  HUGGINGFACE_API_URL: 'https://api-inference.huggingface.co/models/alexander-pyshkin/russian-news-classifier'
};

// –ö—ç—à –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª–∏—Ü
const streetCache = new Map();

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

function isKareliaNews(text) {
  const lower = text.toLowerCase();
  return CONFIG.KARELIA_CITIES.some(city => 
    lower.includes(city.toLowerCase())
  );
}

function extractCity(text) {
  const lower = text.toLowerCase();
  for (const city of CONFIG.KARELIA_CITIES) {
    if (lower.includes(city.toLowerCase())) {
      return city;
    }
  }
  return '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫';
}

// –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –≤ –ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–µ —á–µ—Ä–µ–∑ Nominatim
async function geocodeStreet(street) {
  if (streetCache.has(street)) {
    return streetCache.get(street);
  }

  try {
    const query = `${street}, –ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è`;
    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&addressdetails=1`;
    const res = await axios.get(url, {
      headers: { 'User-Agent': 'KareliaNewsMap/1.0 (your-email@example.com)' }
    });

    if (res.data && res.data.length > 0) {
      const first = res.data[0];
      if (first.address && first.address.city === 'Petrozavodsk') {
        const coords = { lon: parseFloat(first.lon), lat: parseFloat(first.lat) };
        streetCache.set(street, coords);
        await new Promise(r => setTimeout(r, 1100)); // –ª–∏–º–∏—Ç Nominatim
        return coords;
      }
    }
  } catch (e) {
    console.warn(`Geocoding failed for street: ${street}`, e.message);
  }

  return null;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ª–∏—Ü—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractStreet(text) {
  const match = text.match(/(?:—É–ª–∏—Ü[–∞—ã]|—É–ª\.?|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø—Ä\.?|–±—É–ª—å–≤–∞—Ä|–±\.?|–ø–µ—Ä–µ—É–ª–æ–∫|–ø–µ—Ä\.?)\s+([–ê-–Ø–Å][–∞-—è—ë\s\-]+)/i);
  return match ? match[1].trim() : null;
}

// –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ AI + fallback
async function classifyWithAI(text) {
  if (!text || text.length < 20) return 'other';

  try {
    const payload = { inputs: text.substring(0, 512) };
    const response = await axios.post(CONFIG.HUGGINGFACE_API_URL, payload, { timeout: 10000 });
    const result = response.data;

    if (Array.isArray(result) && result.length > 0) {
      const labelMap = {
        '–ü–æ–ª–∏—Ç–∏–∫–∞': 'politics',
        '–ü—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç—å': 'crime',
        '–ö—É–ª—å—Ç—É—Ä–∞': 'culture',
        '–≠–∫–æ–Ω–æ–º–∏–∫–∞': 'economy',
        '–°–ø–æ—Ä—Ç': 'sports',
        '–ù–∞—É–∫–∞': 'science',
        '–ê–≤–∞—Ä–∏–∏': 'accidents',
        '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞': 'infrastructure'
      };
      return labelMap[result[0].label] || 'other';
    }
  } catch (e) {
    console.warn('AI classification failed, using fallback:', e.message);
  }

  // Fallback –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const lower = text.toLowerCase();
  const CATEGORIES = {
    politics: ['–≤—ã–±–æ—Ä—ã', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä', '–¥–µ–ø—É—Ç–∞—Ç', '–∑–∞–∫–æ–Ω'],
    crime: ['–∑–∞–¥–µ—Ä–∂–∞–Ω', '–∫—Ä–∞–∂–∞', '–î–¢–ü', '–ø–æ–∂–∞—Ä', '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–ø–æ–ª–∏—Ü–∏—è', '—Å—É–¥'],
    culture: ['–≤—ã—Å—Ç–∞–≤–∫–∞', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–º—É–∑–µ–π', '—Ñ–µ—Å—Ç–∏–≤–∞–ª—å', '—Ç–µ–∞—Ç—Ä', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞'],
    economy: ['—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–±–∏–∑–Ω–µ—Å', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–∑–∞–≤–æ–¥'],
    sports: ['—Å–ø–æ—Ä—Ç', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '–º–∞—Ç—á', '—Ç—É—Ä–Ω–∏—Ä', '—Å—Ç–∞–¥–∏–æ–Ω', '—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π'],
    science: ['–Ω–∞—É–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∞–∫–∞–¥–µ–º–∏—è', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è'],
    accidents: ['–∞–≤–∞—Ä–∏—è', '–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞', '–ß–ü', '—É—Ç–µ—á–∫–∞', '–æ–±—Ä—É—à–µ–Ω–∏–µ'],
    infrastructure: ['–¥–æ—Ä–æ–≥–∞', '—Ä–µ–º–æ–Ω—Ç', '—Ç–µ–ø–ª–æ—Ç—Ä–∞—Å—Å–∞', '—Å–≤–µ—Ç–æ—Ñ–æ—Ä', '–º–æ—Å—Ç']
  };

  for (const [cat, keywords] of Object.entries(CATEGORIES)) {
    if (keywords.some(kw => lower.includes(kw))) {
      return cat;
    }
  }
  return 'other';
}

// === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
let cachedNews = [];
let lastFetch = 0;

async function fetchAndProcessNews() {
  const now = Date.now();
  if (now - lastFetch < 3 * 60 * 1000 && cachedNews.length > 0) {
    return cachedNews;
  }

  const parser = new Parser();
  const allNews = [];

  for (const url of CONFIG.RSS_SOURCES) {
    try {
      console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥: ${url}`);
      const feed = await parser.parseURL(url);
      let count = 0;
      for (const item of feed.items || []) {
        if (!item.title || !item.link) continue;

        const fullText = (item.title + ' ' + (item.contentSnippet || item.content || '')).trim();
        if (!isKareliaNews(fullText)) continue;

        const pubDate = new Date(item.pubDate || item.isoDate || Date.now());
        if (isNaN(pubDate.getTime()) || now - pubDate.getTime() > CONFIG.MAX_NEWS_AGE) continue;

        const city = extractCity(fullText);
        let coords = CONFIG.CITY_COORDS[city] || CONFIG.CITY_COORDS['–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫'];

        if (city === '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫') {
          const street = extractStreet(fullText);
          if (street) {
            const streetCoords = await geocodeStreet(street);
            if (streetCoords) coords = streetCoords;
          }
        }

        const category = await classifyWithAI(fullText);

        allNews.push({
          title: item.title.trim(),
          description: (item.contentSnippet || item.content || '').trim(),
          link: item.link,
          pubDate: pubDate.toISOString(),
          location: city,
          lon: coords.lon,
          lat: coords.lat,
          category: category
        });
        count++;
      }
      console.log(`  ‚Üí –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: ${count}`);
    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${url}:`, e.message);
    }
  }

  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
  const seen = new Set();
  const uniqueNews = allNews.filter(item => {
    const key = `${item.link}|${item.title}`.toLowerCase();
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });

  cachedNews = uniqueNews;
  lastFetch = now;
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${cachedNews.length} –Ω–æ–≤–æ—Å—Ç–µ–π`);
  return cachedNews;
}

module.exports = { fetchAndProcessNews };